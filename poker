#!/usr/bin/env ruby

require 'socket'
require 'oj'

class Poker
  def initialize
    @option = ARGV[0]
    @max_players = ARGV[0] == 'start' && ARGV[1].to_i 
    @player_vote = ARGV[0] == 'vote' && ARGV[1] 
    @host = ARGV[2]
    @port = ARGV[3]
    @name = ARGV[4]
  end

  def distinguish
    self.send(option)
  rescue
    puts "No such option: #{option}\navailable options: 'start' and 'vote'"
  end

  private

  attr_reader :option, :max_players, :player_vote, :host, :port, :name

  def vote
    socket = TCPSocket.open( host, port )
    if [1,2,3,5,8].include?(player_vote.to_i)
      socket.puts(Oj.dump({ name: name, vote: player_vote }))
      while message = socket.gets
        puts message.chomp
      end
    else
      puts "Wrong. Please be a good citizen and try again. Possible votes are: 1 2 3 5 8"
    end
  rescue Errno::ECONNREFUSED
    puts 'Sorry, server not responsive'
    exit
  end

  def start
    puts "Poker started now"
    s = TCPServer.new(host, port)
    players = []
    votes = {}
    while (player = s.accept)
      Thread.new(player) do |conn|
        (players << player).uniq!
        if votes.size <= max_players
          loop do
            received_vote = conn.gets&.chomp
            next unless received_vote
            parsed_vote = Oj.load(received_vote)
            votes[parsed_vote[:name]] = parsed_vote[:vote].to_i
            conn.puts show_progress(votes)
            if votes.size == max_players
              puts final_result(votes)
              exit
            end
            conn.close
            Thread.exit
          end
        end
      end
    end
  ensure
    puts 'exiting...'
    exit
  end

  def final_result(votes)
    average = votes.values.sum.fdiv(votes.size)
    <<-HEREDOC
      Final note: #{planning_poker_round(average)}
      ----------------------
      1 #{join_votes(votes, 1)}
      2 #{join_votes(votes, 2)}
      3 #{join_votes(votes, 3)}
      5 #{join_votes(votes, 5)}
      8 #{join_votes(votes, 8)}
    HEREDOC
  end

  def join_votes(votes, vote_label)
    votes.select { |_k, v| v == vote_label}.keys.join(', ')
  end

  def planning_poker_round(average)
    case average
    when 1; 1
    when 1..2; 2
    when 2..3; 3
    when 3..5; 5
    when 5..8; 8
    end
  end

  def show_progress(votes)
    "[#{progress_bar(votes)}] [#{votes.size} out of #{max_players} votes added]"
  end

  def progress_bar(votes)
    bar_init = "   " * max_players
    votes.size.times { bar_init.sub!('   ', '###') }
    bar_init
  end
end

Poker.new.distinguish
